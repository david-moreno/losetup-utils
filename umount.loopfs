#!/bin/bash

# umount.loopfs - Unmounts an encrypted volume as described in losetup(8)
#
# Copyright (C) 2012 David Moreno <dmc.coder@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#Number of arguments used.
ARGS_NUM=1

#Default values.
VERSION="1.0"
AUTHOR="(C)2012 David Moreno <dmc.coder@gmail.com>"

#Error codes.
ERROR_OK=0
ERROR_LOOP=1
ERROR_UMOUNT=2
ERROR_LOSETUP=3

function show_help {
	pname=`basename $0`
	help="$pname - Unmounts an encrypted volume as described in losetup(8)\n"\
"Version: $VERSION\n"\
"Usage: $pname [LOOP]\n\n"\
"\tLOOP\tThe loop device to unmount\n"\
"\nThis program must be run as root\n"\
"\n$AUTHOR"
	echo -e $help
}

#Checks the arguments.
if [ $# -ne $ARGS_NUM ]; then
	show_help
	exit $ERROR_OK
fi

LOOP=$1

#We are root?
if [[ $EUID -ne 0 ]]; then
	echo "This script must be run as root"
	exit $ERROR_OK
fi

#The loop device exists?
if [ ! -e $LOOP ]; then
	echo "ERROR: The loop device does not exist: $LOOP"
	exit $ERROR_LOOP
fi

#Unmounts and dissasociates the loop device.
umount $LOOP
if [ $? -ne 0 ]; then
	echo "ERROR: Cannot unmount $LOOP"
	exit $ERROR_UMOUNT
fi

losetup -d $LOOP
if [ $? -ne 0 ]; then
	echo "ERROR: Cannot disassociate $LOOP"
	exit $ERROR_LOSETUP
fi

echo "$LOOP unmounted"
exit $ERROR_OK
